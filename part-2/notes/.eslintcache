[{"C:\\Users\\Hearan\\Desktop\\web dev prep\\part2-notes-part2-3,4\\src\\index.js":"1","C:\\Users\\Hearan\\Desktop\\web dev prep\\part2-notes-part2-3,4\\src\\App.js":"2","C:\\Users\\Hearan\\Desktop\\web dev prep\\part2-notes-part2-3,4\\src\\components\\Note.js":"3","C:\\Users\\Hearan\\Desktop\\web dev prep\\part2-notes-part2-3,4\\src\\services\\notes.js":"4"},{"size":1346,"mtime":1616096551707,"results":"5","hashOfConfig":"6"},{"size":2769,"mtime":1616091013585,"results":"7","hashOfConfig":"6"},{"size":358,"mtime":1616089174280,"results":"8","hashOfConfig":"6"},{"size":1057,"mtime":1616090860078,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jmn1dn",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"15"},"C:\\Users\\Hearan\\Desktop\\web dev prep\\part2-notes-part2-3,4\\src\\index.js",[],"C:\\Users\\Hearan\\Desktop\\web dev prep\\part2-notes-part2-3,4\\src\\App.js",["21","22"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n\n  // fetch data from server\n  useEffect(() => {\n    // replace axios.get\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n  console.log('render', notes.length, 'notes')\n  \n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n  \n    // post on server\n    // replace using module\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n      // set new note for display\n        setNotes(notes.concat(returnedNote.data))\n        setNewNote('')\n     })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n\n\n  const toggleImportanceOf = (id) => {\n    const url = `http://localhost:3001/notes/${id}`\n    // find the note object with id\n    const note = notes.find(n => n.id === id)\n    // this is only a shallow-copy\n    // field by field  copy (if refernece, the reference is copied)\n    // deep copy: new  copy objects are created for any referenced object \n    // value of new object are the same as values of old object\n    const changedNote = {...note, important: !note.important }\n\n    // replace the note\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        // if not the id looking for, just original note, otherwise change to response.data\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote.data))\n      })\n      .catch(error => {\n        alert(\n          'the note '+ note.content + 'was already delted from server'\n        )\n        setNotes(notes.filter(n => n.id !== id))\n      })\n    \n  }\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>   \n      <ul>\n        {notesToShow.map(note => \n            <Note \n            key={note.id} \n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n    </div>\n  )\n}\n\nexport default App",["23","24"],"C:\\Users\\Hearan\\Desktop\\web dev prep\\part2-notes-part2-3,4\\src\\components\\Note.js",[],"C:\\Users\\Hearan\\Desktop\\web dev prep\\part2-notes-part2-3,4\\src\\services\\notes.js",["25"],"// extracted backend operations here\r\n\r\nimport axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    // we no longer return the promise returned by axios directly,\r\n    // instead assign promise to request variable, call then method\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n// this module returns an object that has three functions \r\n// the functions directly return the promises returned by the axios methods\r\nexport default { \r\n    // label to the left of colon are keys of object, right of it are  variables \r\n    //getAll: getAll, \r\n    // since the name of the key and variable are same, write it in more compact syntax\r\n    getAll,\r\n    create,\r\n    update\r\n}",{"ruleId":"26","severity":1,"message":"27","line":2,"column":8,"nodeType":"28","messageId":"29","endLine":2,"endColumn":13},{"ruleId":"26","severity":1,"message":"30","line":53,"column":11,"nodeType":"28","messageId":"29","endLine":53,"endColumn":14},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":25,"column":1,"nodeType":"37","endLine":32,"endColumn":2},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'url' is assigned a value but never used.","no-native-reassign",["38"],"no-negated-in-lhs",["39"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]